package com.app.authentiScan.utils;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import net.sf.jasperreports.engine.JRDataSource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Getter
@Setter
@Slf4j
public class CustomJasperReport implements Serializable {


    private static final long serialVersionUID = -8527892494236381680L;

    // required information
    String reportName;
    String reportDir;
    Long userHospitalId;
    private String refValueString_1;
    private String refValueString_2;
    private String refValueString_3;
    private String refValueString_4;
    private String refValueString_5;
    private Long refValueLong_1;
    private Long refValueLong_2;
    private Date refValueDate_1;
    private Date refValueDate_2;
    private String reportTitle;


    // report parameters
    Map<String, Object> parameters = new HashMap<String, Object>();

    // report format
    JasperReportExportFormat reportFormat = JasperReportExportFormat.PDF_FORMAT;

    // data source
    Collection<?> reportData;
    String reportJsonData;
    JRDataSource dataSource;

    // additional configuration
    Boolean useDefaultConfiguration;
    Map<String, Object> reportConfiguration = new HashMap<String, Object>();

    // generated byte array
    byte[] content;

    // output filename
    String outputFilename;

    public static long getSerialversionuid() {
        return serialVersionUID;
    }

    /**
     * get report as resource from report path
     *
     * @return
     * @throws FileNotFoundException
     */
    public Resource getReport() throws FileNotFoundException {
        String reportPath = reportDir + reportName;
        Resource result = new FileSystemResource(reportPath + ".jasper");
        if (result.exists()) {
            return result;
        }

        result = new FileSystemResource(reportPath + ".jrxml");
        if (result.exists()) {
            return result;
        }
        throw new FileNotFoundException("Report [" + reportPath + ".jasper" + "] or [" + reportPath + ".jrxml] file not found");
    }
    
    public Resource getReportPath() throws FileNotFoundException {
        String reportPath = reportDir + reportName;
        ClassPathResource result = new ClassPathResource(reportPath + ".jasper");
        //Resource result = new FileSystemResource(reportPath + ".jasper");
        if (result.exists()) {
            return result;
        }

        result = new ClassPathResource(reportPath + ".jrxml");
        if (result.exists()) {
            return result;
        }
        throw new FileNotFoundException("Report [" + reportPath + ".jasper" + "] or [" + reportPath + ".jrxml] file not found");
    }

    public String getReportName() {
        return reportName;
    }

    public void setReportName(String reportName) {
        this.reportName = reportName;
    }

    public String getReportDir() {
        return reportDir;
    }

    public void setReportDir(String reportDir) {
        this.reportDir = reportDir;
    }

    public Map<String, Object> getParameters() {
        return parameters;
    }

    public void setParameters(Map<String, Object> parameters) {
        this.parameters = parameters;
    }

    public JasperReportExportFormat getReportFormat() {
        return reportFormat;
    }

    public void setReportFormat(JasperReportExportFormat reportFormat) {
        this.reportFormat = reportFormat;
    }

    public Collection<?> getReportData() {
        return reportData;
    }

    public void setReportData(Collection<?> reportData) {
        this.reportData = reportData;
    }

    public JRDataSource getDataSource() {
        return dataSource;
    }

    public void setDataSource(JRDataSource dataSource) {
        this.dataSource = dataSource;
    }

    public Boolean getUseDefaultConfiguration() {
        return useDefaultConfiguration;
    }

    public void setUseDefaultConfiguration(Boolean useDefaultConfiguration) {
        this.useDefaultConfiguration = useDefaultConfiguration;
    }

    public byte[] getContent() {
        return content;
    }

    public void setContent(byte[] content) {
        this.content = content;
    }

    public String getOutputFilename() {
        return outputFilename;
    }

    public void setOutputFilename(String outputFilename) {
        this.outputFilename = outputFilename;
    }

    public Map<String, Object> getReportConfiguration() {
        return reportConfiguration;
    }

    public void setReportConfiguration(Map<String, Object> reportConfiguration) {
        this.reportConfiguration = reportConfiguration;
    }

	public Long getUserHospitalId() {
		return userHospitalId;
	}

	public void setUserHospitalId(Long userHospitalId) {
		this.userHospitalId = userHospitalId;
	}
    
    

}
